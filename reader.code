/*------------------------

 * Pin layout should be as follows:
 * Signal     Pin              Pin               Pin
 *            Arduino Uno      Arduino Mega      MFRC522 board
 * ------------------------------------------------------------
 * Reset      9                5                 RST
 * SPI SS     10               53                SDA
 * SPI MOSI   11               51                MOSI
 * SPI MISO   12               50                MISO
 * SPI SCK    13               52                SCK
 * voltage 3.3v

 */

#include <SPI.h>
#include <MFRC522.h>


#define SS_PIN 10
#define RST_PIN 9

int elock = 4;

MFRC522 rfid(SS_PIN, RST_PIN); // Create MFRC522 instance.

/**
 * mfrc522.PICC_IsNewCardPresent() should be checked before 
 * @return the card UID or 0 when an error occurred
 */
String getID(MFRC522 rfid){
  String ID = "";
  for (byte i = 0; i < 4; i ++){
   ID += String(rfid.uid.uidByte[i] < 0x10 ? " 0" : " ");
   ID += String(rfid.uid.uidByte[i], DEC);
   }
  return ID;
}

void setup()
{
  Serial.begin(9600); // Initialize serial communications with the PC
  pinMode(elock, OUTPUT);
  digitalWrite(elock, LOW);
  SPI.begin();     // Init SPI bus
  rfid.PCD_Init(); // Init MFRC522 card
  Serial.println("Scan a MIFARE Classic PICC to demonstrate Value Blocks.");
  Serial.println("HI PLS SCAN BOSS");
}

void loop()
{

  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  MFRC522::MIFARE_Key key;
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }
  // Look for new cards
  if (!rfid.PICC_IsNewCardPresent())
  {
    return;
  }

  // Select one of the cards
  if (!rfid.PICC_ReadCardSerial())
  {
    return;
  }
  // Now a card is selected. The UID and SAK is in mfrc522.uid.

  // Dump UID
  Serial.print("Card UID:");
  for (byte i = 0; i < rfid.uid.size; i++)
  {
    Serial.print(rfid.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(rfid.uid.uidByte[i], DEC);
  }
  Serial.println();

  // Dump PICC type
  byte piccType = rfid.PICC_GetType(rfid.uid.sak);
  // Serial.print("PICC type: ");
  // Serial.println(rfid.PICC_GetTypeName(piccType));
  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI && piccType != MFRC522::PICC_TYPE_MIFARE_1K && piccType != MFRC522::PICC_TYPE_MIFARE_4K)
  {
    Serial.println("This sample only works with MIFARE Classic cards.");
    return;
  }

  // Serial.print("id: ");
  // Serial.print(getID(rfid));
  // Serial.println();

  // Serial.print("id: ");
  // Serial.print(String(' 50 113 84 207', DEC));
  // Serial.println(getID(rfid) == String(' 50 113 84 207'));

  int bingo = 0;

  // defining Cards here
  if ((rfid.uid.uidByte[0] == 243) && (rfid.uid.uidByte[1] == 36) && (rfid.uid.uidByte[2] == 177) && (rfid.uid.uidByte[3] == 207))
  {
    Serial.println("Tag A detected");
    bingo = 1;
  }
  else if ((rfid.uid.uidByte[0] == 218) && (rfid.uid.uidByte[1] == 136) && (rfid.uid.uidByte[2] == 125) && (rfid.uid.uidByte[3] == 122))
  {
    Serial.println("Tag B detected");
    bingo = 2;

  }
  else if ((rfid.uid.uidByte[0] == 218) && (rfid.uid.uidByte[1] == 94) && (rfid.uid.uidByte[2] == 219) && (rfid.uid.uidByte[3] == 122))
  {
    Serial.println("Tag C detected");
    bingo = 3;

  }
  else if ((rfid.uid.uidByte[0] == 50) && (rfid.uid.uidByte[1] == 243) && (rfid.uid.uidByte[2] == 12) && (rfid.uid.uidByte[3] == 255))
  {
    Serial.println("Tag D detected");
    bingo = 4;

  }
  else if ((rfid.uid.uidByte[0] == 193) && (rfid.uid.uidByte[1] == 50) && (rfid.uid.uidByte[2] == 55) && (rfid.uid.uidByte[3] == 13))
  {
    Serial.println("Tag E detected");
    bingo = 5;
  }
  else if ((rfid.uid.uidByte[0] == 123) && (rfid.uid.uidByte[1] == 194) && (rfid.uid.uidByte[2] == 17) && (rfid.uid.uidByte[3] == 255))
  {
    Serial.println("Tag F detected");
    bingo = 6;

  }
    else if ((rfid.uid.uidByte[0] == 74) && (rfid.uid.uidByte[1] == 188) && (rfid.uid.uidByte[2] == 129) && (rfid.uid.uidByte[3] == 129))
  {
    Serial.println("Tag G detected");
    bingo = 7;

  }
      else if ((rfid.uid.uidByte[0] == 74) && (rfid.uid.uidByte[1] == 220) && (rfid.uid.uidByte[2] == 70) && (rfid.uid.uidByte[3] == 129))
  {
    Serial.println("Tag H detected");
    bingo = 8;

  }
  else if ((rfid.uid.uidByte[0] == 50) && (rfid.uid.uidByte[1] == 113) && (rfid.uid.uidByte[2] == 84) && (rfid.uid.uidByte[3] == 207))
  {
    Serial.println("Tag I detected");
    bingo = 9;
  }

  

  else {
    Serial.println("unregistered user");
    // bingo = 'default';
  }


  Serial.println(bingo);
  delay(1000);
}